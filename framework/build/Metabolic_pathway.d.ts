/// <reference path="linq.d.ts" />
/// <reference path="../layer.d.ts" />
/// <reference path="biocad_webcore.d.ts" />
declare namespace biodeep.app {
    function start(): void;
}
declare const __indexOf: (searchElement: any, fromIndex?: number) => number;
declare namespace apps {
    class Cola_graph {
        node: any;
        link: any;
        group: any;
        label: any;
        private vm;
        constructor(node: any, link: any, group: any, label: any, vm: Metabolic_pathway);
        tick(): Delegate.Action;
        private transform;
    }
}
declare namespace apps {
    class Metabolic_pathway {
        private width;
        private height;
        margin: number;
        pad: number;
        private d3cola;
        private outer;
        private vis;
        constructor();
        private redraw;
        savePng(): void;
        init(): Metabolic_pathway;
        /**
         * load network graph model and then
         * initialize data visualization
         * components.
        */
        private loadGraph;
        private static insertLinebreaks;
    }
}
declare namespace apps {
    class FlowEditor extends Bootstrap {
        readonly appName: string;
        /**
         * SD is a global variable, to avoid polluting global namespace
         * and to make the global nature of the individual variables
         * obvious.
        */
        readonly SD: {
            /**
             * Set to default mode.  Alternatives are
             * "node" and "link", for adding a new node
             * or a new link respectively.
            */
            mode: string;
            /**
             * Set when user clicks on a node or link
             * button.
            */
            itemType: string;
            nodeCounter: {
                stock: number;
                cloud: number;
                variable: number;
                valve: number;
            };
        };
        /**
         * Declared as global
        */
        private myDiagram;
        private config;
        init(): void;
        buildTemplates(): void;
        /**
         * Define the appearance and behavior for Groups
        */
        private static groupInfo;
        setMode(mode: string, itemType: string): void;
        /**
         * Show the diagram's model in JSON format
         * that the user may edit.
         *
        */
        save_click(): void;
        load(): void;
        private dosave;
        pointer_click(): void;
        stock_click(): void;
        cloud_click(): void;
        variable_click(): void;
        flow_click(): void;
        influence_click(): void;
        /**
         * save the current dynamics system
        */
        run_click(): void;
        private doRunModel;
    }
}
declare namespace apps {
    function ModelPatch(model: Model): Model;
    interface Model {
        nodeDataArray: {
            category: string;
            group: string;
            key: string;
            label: string;
            loc: string;
            isGroup: boolean;
        }[];
        linkDataArray: {
            category: string;
            from: string;
            labelKeys: string[];
            text: string;
            to: string;
        }[];
    }
}
declare namespace apps.EditorTemplates {
    function nodeStyle(): any[];
    function shapeStyle(): {
        name: string;
        stroke: string;
        fill: string;
        portId: string;
        fromLinkable: boolean;
        toLinkable: boolean;
    };
    function textStyle(): any[];
}
declare namespace apps {
    class PathwayExplorer extends Bootstrap {
        readonly appName: string;
        readonly assemblyKey: string;
        readonly canvas: Metabolic_pathway;
        protected init(): void;
        private loadUITree;
        private static addReactor;
        private saveCache;
        private loadCache;
    }
}
declare namespace PathwayNavigator {
    function parseJsTree(kegg_tree: KEGG.brite.IKEGGBrite): jsTree;
}
declare namespace PathwayNavigator {
    /**
     * Expected format of the node (there are no required fields)
    */
    interface jsTree {
        /**
         * the unique id of a tree node, will be autogenerated if omitted
        */
        id: string;
        /**
         * node text
        */
        text: string;
        /**
         * string for custom
        */
        icon?: string;
        state?: {
            /**
             * is the node open
            */
            opened: boolean;
            /**
             * is the node disabled
            */
            disabled: boolean;
            /**
             * is the node selected
            */
            selected: boolean;
        };
        /**
         * array of strings or objects
        */
        children?: jsTree[];
        /**
         * attributes for the generated LI node
        */
        li_attr?: {};
        /**
         * attributes for the generated A node
        */
        a_attr?: {};
    }
}
declare class Graph {
    nodes: node[];
    links?: link[];
    constraints?: constraint[];
    groups?: group[];
    private last_index;
    constructor(graph?: Graph);
    /**
     * resolve node IDs (not optimized at all!)
    */
    objectify(): any[];
    /**
     * remove the given node or link from the graph, also deleting dangling links if a node is removed
    */
    remove(condemned: any): link[];
    add_node(type: string): node;
    add_link(source: number, target: number): link;
}
interface node {
    /**
     * the display label text
    */
    label: string;
    /**
     * the unique id
    */
    dunnartid: string;
    type: string;
    index: number;
    width: number;
    height: number;
    x: number;
    y: number;
    rx: number;
    ry: number;
}
interface link {
    source: number;
    target: number;
}
interface graphLink {
    source: node;
    target: node;
}
interface constraint {
    axis: "x" | "y";
    offsets: {
        node: number;
        offset: number;
    }[];
    type: string;
}
interface group {
    leaves: number[];
    padding: number;
    style: string;
}
declare namespace dataAdapter {
    class parseDunnart {
        private nodeLookup;
        private graph;
        private sbsvg;
        constructor(svgObjId?: string);
        getGraph(): Graph;
        private loadNodes;
    }
}
